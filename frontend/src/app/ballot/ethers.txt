 const { ethers } = await import("ethers")
 
 const provider = new ethers.JsonRpcProvider('https://spicy-rpc.chiliz.com/');

 provider.getBlockNumber()

 abi = 
[
	{
		"inputs": [
			{
				"internalType": "string[]",
				"name": "proposalNames",
				"type": "string[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "chairperson",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getNumProposals",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "numproposals",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getProposal",
		"outputs": [
			{
				"internalType": "string",
				"name": "proposalName_",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "proposals",
		"outputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "voteCount",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "proposal",
				"type": "uint256"
			}
		],
		"name": "vote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "voters",
		"outputs": [
			{
				"internalType": "bool",
				"name": "voted",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "vote",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winnerName",
		"outputs": [
			{
				"internalType": "string",
				"name": "winnerName_",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winningProposal",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "winningProposal_",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]


const contraddr = '0x4DB64FB220c78007B1bB27BBcb51a7f28FdE3058'

const ballotContract = new ethers.Contract(contraddr, abi, provider);

const numProposals = await ballotContract.getNumProposals();

for (let i = 0; i < numProposals; i++) {
    const proposalName = await ballotContract.getProposal(i);
    console.log(proposalName);
}


const contraddr = '0x6FB4e9092D67f04380a1DcD7aFD5D09ee79cf0DF'

const ballotContract = new ethers.Contract(contraddr, abi, provider);

const numProposals = await ballotContract.getNumProposals();

for (let i = 0; i < numProposals; i++) {
    const proposalName = await ballotContract.getProposal(i);
    console.log(proposalName);
}






//yes no proposal

contraddryesno2 = 0x76EC75124fE4d31743db78dc2a3375923ac70cEB 
const ballotContractyesno2 = new ethers.Contract(contraddryesno2, abi, provider);

const numProposalsyesno2 = await ballotContractyesno2.getNumProposals();

for (let i = 0; i < numProposalsyesno2; i++) {
    const proposalName = await ballotContractyesno2.getProposal(i);
    console.log(proposalName);
}

